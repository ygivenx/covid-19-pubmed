{
    "paper_id": "PMC3615752",
    "metadata": {
        "title": "Advanced Querying Features for Disease Surveillance Systems",
        "authors": [
            {
                "first": "Mohammad",
                "middle": [
                    "R."
                ],
                "last": "Hashemian",
                "suffix": "",
                "email": null,
                "affiliation": {}
            }
        ]
    },
    "body_text": [
        {
            "text": "In its 2007 annual report, the World Health Organization warned of the increased rate at which diseases spread in a world where 2 billion people travel by air [1]. The early detection of known and emerging illnesses is becoming more important. Automated disease surveillance systems have been in existence for over 10 years [2\u20134]. Most of these systems analyze data by syndrome and search for disease outbreaks. A syndrome in this context is defined as a group of diseases related in some fashion, such as respiratory diseases. This level of investigation is often sufficient, but a more dynamic level of control may be required to understand an emerging illness in a community.",
            "cite_spans": [
                {
                    "start": 160,
                    "end": 161,
                    "mention": "1",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 325,
                    "end": 326,
                    "mention": "2",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 327,
                    "end": 328,
                    "mention": "4",
                    "ref_id": "BIBREF8"
                }
            ],
            "section": "Introduction",
            "ref_spans": []
        },
        {
            "text": "For example, during the 2002\u20132003 Severe Acute Respiratory Syndrome (SARS) disease epidemic [5], the respiratory syndrome definition used by most automated disease surveillance systems was too broad to track SARS [6]. In this case, the users needed to create queries that looked for specific keywords in the patient chief complaint or specific combinations of ICD-9 codes [7]. A chief complaint is text entered by a triage professional in an emergency room or a clinic, based on a patient\u2019s description of their primary symptoms. Today\u2019s public health departments must deal with a multitude of data coming from a variety of sources. For example, Electronic Medical Record (EMR) data include sources such as radiology, laboratory, and pharmacy data. A more sophisticated querying tool is needed to assist investigators with creating inquiries across multiple data sources [8\u201310].",
            "cite_spans": [
                {
                    "start": 93,
                    "end": 94,
                    "mention": "5",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 214,
                    "end": 215,
                    "mention": "6",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 373,
                    "end": 374,
                    "mention": "7",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 872,
                    "end": 873,
                    "mention": "8",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 874,
                    "end": 876,
                    "mention": "10",
                    "ref_id": "BIBREF1"
                }
            ],
            "section": "Introduction",
            "ref_spans": []
        },
        {
            "text": "Currently, there are surveillance systems, such as the Electronic Surveillance System for the Early Notification of Community-based Epidemics (ESSENCE) [11], which provide limited dynamic querying capability. However, we wanted to design a flexible and simple graphical user interface (GUI) for this and other types of surveillance systems. Our prototype system, the Advanced Querying Tool (AQT), allows the investigators to handle complex cases where one can incorporate any data elements available in a disease surveillance system, then mix and match these data elements in order to define valid queries. Hence, this system removes the need for database administrators and application developers to define pre-packaged database queries and user interfaces every time a new and innovative query is written.",
            "cite_spans": [
                {
                    "start": 153,
                    "end": 155,
                    "mention": "11",
                    "ref_id": "BIBREF2"
                }
            ],
            "section": "Introduction",
            "ref_spans": []
        },
        {
            "text": "As an example, investigating a potential influenza outbreak in an adult population may require respiratory syndrome queries only, while investigating a similar outbreak in children under 4 years old may involve queries in both gastrointestinal and respiratory syndromes (Figure 1).",
            "cite_spans": [],
            "section": "Introduction",
            "ref_spans": [
                {
                    "start": 271,
                    "end": 279,
                    "mention": "Figure 1",
                    "ref_id": "FIGREF0"
                }
            ]
        },
        {
            "text": "Table 1 provides examples of how a dynamic query tool exploits combinations of data elements available to disease surveillance systems. Most automated disease surveillance systems have a fixed number of predefined syndromes. These applications severely limit the surveillance system value for diseases that fall outside of its broad syndrome categories. The background noise level rises when all the chief complaints that potentially fall into a syndrome category are included, which in turn requires many more positive cases to identify an abnormal condition. Merely adding sub-syndrome categories, that are more granular than syndromes and cover a broader range of conditions than typical syndromic surveillance like injures and chronic disease [12], provides the users with a more comprehensive means to filter the analysis window. If a disease surveillance system has 400 sub-syndromes, then taken singly the user has 400 additional choices; by combining two or three sub-syndromes, the analysis options are magnified to over ten million choices. Of course not all of these options are sensible, so the actual number of options is somewhat less. Even greater analytic flexibility is provided through the use of data elements contained within electronic medical records. The capability to select a combination of a microbiology laboratory result, radiology result, and ICD-9 code provides for a powerful tool that enables the public health community to rapidly identify specific high risk patients.",
            "cite_spans": [
                {
                    "start": 748,
                    "end": 750,
                    "mention": "12",
                    "ref_id": "BIBREF3"
                }
            ],
            "section": "Introduction",
            "ref_spans": [
                {
                    "start": 0,
                    "end": 7,
                    "mention": "Table 1",
                    "ref_id": "TABREF0"
                }
            ]
        },
        {
            "text": "The following objectives summarize the design features of the AQT:",
            "cite_spans": [],
            "section": "Objectives",
            "ref_spans": []
        },
        {
            "text": "The tool\u2019s interface will help generate queries that can process any kind of data regardless of its source (e.g., emergency room visit, office visit, pharmacy, and laboratory). Unlike fixed-form query interfaces, AQT will not restrict users in what they can query. Instead, the user will be able to formulate ad-hoc queries across assorted data sources without the need to understand the underlying data models and the query languages associated with different systems. In addition, using this tool should save investigators\u2019 valuable time in obtaining the query results. Currently, if the surveillance system cannot generate the desired queries, the application developers and/or database administrators may have to create new interfaces or functionalities. The AQT, however, empowers the users to move forward with their research without waiting for developer or administrator modifications to the surveillance systems.",
            "cite_spans": [],
            "section": "Objectives",
            "ref_spans": []
        },
        {
            "text": "The interface will accommodate users with different levels of experience in creating complex and valid queries. The process will be natural and follow the same patterns that one uses to express a mathematical equation. At the same time, it will give the more experienced users, who are familiar with the data elements, the freedom to define complex queries by sidestepping the guiding tools. The advanced users will have the ability to type in their queries and the tool will validate them and provide feedback on possible syntax errors.",
            "cite_spans": [],
            "section": "Objectives",
            "ref_spans": []
        },
        {
            "text": "The interface will allow users to save and share queries with other public health professionals, even in different jurisdictions. After defining a complex query the user has the ability to store the query for future investigations. One should be able to execute the stored query repeatedly in the future, include it as a segment of a bigger query, or customize and execute it. These saved queries can then be shared as part of collaborative efforts among users in different departments and jurisdictions. AQT will provide an interface for disease surveillance systems to store, retrieve, and share queries. These capabilities are especially valuable for users employing a case definition for following a disease outbreak. A case definition is a set of symptoms, signs, etc., by which public health professionals define those patients considered to be directly a part of the disease outbreak.",
            "cite_spans": [],
            "section": "Objectives",
            "ref_spans": []
        },
        {
            "text": "Finally, the tool should be self-contained and generic. This allows most web-based disease surveillance systems to incorporate the AQT into their systems.",
            "cite_spans": [],
            "section": "Objectives",
            "ref_spans": []
        },
        {
            "text": "The entire functionality of the tool is placed within a single web page (Figure 2).",
            "cite_spans": [],
            "section": "Interface ::: Methods",
            "ref_spans": [
                {
                    "start": 73,
                    "end": 81,
                    "mention": "Figure 2",
                    "ref_id": "FIGREF6"
                }
            ]
        },
        {
            "text": "The screen in Figure 2 is divided into 5 major sections. Starting at the top, the user can filter the data by picking the data source from a dropdown list, start and end date. The surveillance system should supply this list of data sources to the AQT. The next area below is the Message Area where the GUI communicates with the user. Any information, warnings, or error messages are displayed in this section. The next area, the query section, contains the query expression. The users can either directly type the query expression or use the tool to generate the query expression and paste it in this area. Alternatively, they can use a combination of the two methods by typing part of the expression and pasting the rest using the query builder. The query section is followed by the query builder section where the tool provides list boxes, buttons, etc., to direct the user through the process of generating the query expression. The bottom section is where an action on the query is performed. Users can validate the expression\u2019s syntax, save the query for their own future use, save it to be shared with others in the user community, clear the query expression and start over, or simply execute the query and get the results.",
            "cite_spans": [],
            "section": "Interface ::: Methods",
            "ref_spans": [
                {
                    "start": 14,
                    "end": 22,
                    "mention": "Figure 2",
                    "ref_id": "FIGREF6"
                }
            ]
        },
        {
            "text": "As mentioned earlier, the capability to generate queries on data from a variety of sources is one of the objectives of the AQT. Each data source has its own distinctive set of data elements. The interface has to provide a list of data elements pertaining to the chosen data source. For example, the data might represent different geographic regions from one data source to the other. That is, one source might have data identified by zip codes while another source uses some other type of defined region such as hospitals, pharmacies, and schools. Another area where data sources can be different is in medical groupings. For example, office visits often use ICD-9 codes [7], while emergency departments use patient chief complaints. The interface is designed to distinguish valid data elements for each data source and populate the data element list box accordingly.",
            "cite_spans": [
                {
                    "start": 672,
                    "end": 673,
                    "mention": "7",
                    "ref_id": "BIBREF11"
                }
            ],
            "section": "Data source ::: Methods",
            "ref_spans": []
        },
        {
            "text": "After selecting a data source the tool populates a list box with a set of associated data elements for the data source. The list box is divided into three major areas:",
            "cite_spans": [],
            "section": "Data source ::: Methods",
            "ref_spans": []
        },
        {
            "text": "Figure 3 shows how the medical grouping systems differ for Emergency Room (right) and over the counter (left) data sources.",
            "cite_spans": [],
            "section": "Data source ::: Methods",
            "ref_spans": [
                {
                    "start": 0,
                    "end": 8,
                    "mention": "Figure 3",
                    "ref_id": "FIGREF7"
                }
            ]
        },
        {
            "text": "As mentioned earlier, a main objective of the AQT is to provide an interface that caters to both novice and experienced users. The experienced users simply type the query, while beginners and those who are more comfortable with a guided interface can use list boxes and buttons to generate the queries. In fact, one can type part of the query and use the tool to generate the rest of the query (Figure 4). When a user types a query directly, it is assumed that the user knows the syntax and valid data elements pertaining to the data source, though the tool does check the syntax and provide feedback.",
            "cite_spans": [],
            "section": "Flexibility ::: Methods",
            "ref_spans": [
                {
                    "start": 395,
                    "end": 403,
                    "mention": "Figure 4",
                    "ref_id": "FIGREF8"
                }
            ]
        },
        {
            "text": "Because we want the users to define and build their query as if they were writing a logical expression for a mathematical computation, the syntax is simple and close to the \u201cwhere\u201d clause of a Structure Query Language (SQL) statement. However, one does not need to know SQL to write the expressions. A query consists of one or more simple expressions joined by \u201cAND\u201d and/or \u201cOR,\u201d negated by \u201cNOT,\u201d and grouped by parentheses. A simple expression is enclosed within square brackets ([]) and defined by a variable, a logical operator, and a value. For example, if an investigator is searching for reported fever cases within a specified zip code, the query then consists of two simple expressions; one which searches for the specified zip code and the other which checks the fever syndrome. The final query may look like the expression below:",
            "cite_spans": [],
            "section": "Flexibility ::: Methods",
            "ref_spans": []
        },
        {
            "text": "If the investigators want to narrow the search into a certain age group they can type or use the tool to add AND [AGE = \u201c0-4\u201d] to the above expression. Hence, the users can add more conditions without worrying about the underlying data model.",
            "cite_spans": [],
            "section": "Flexibility ::: Methods",
            "ref_spans": []
        },
        {
            "text": "The most complex part of the syntax occurs when searching for values that contain, start with, or end with a set of characters (Figure 5). In this case, the syntax uses \u201c*\u201d as the wildcard character. For example, a user would type [chief-complaints = \u201c*head*\u201d] in the query box if he/she is looking for all the records of chief-complaints that include the word \u201chead.\u201d Similarly, if a user types [chief-complaints = \u201chead*\u201d] or generates it using the tool (selects the Starts With from the operator list box and types head in the text field), the resulting query would search for all the records where the chief-complaints field begins with the word \u201chead.\u201d",
            "cite_spans": [],
            "section": "Flexibility ::: Methods",
            "ref_spans": [
                {
                    "start": 128,
                    "end": 136,
                    "mention": "Figure 5",
                    "ref_id": "FIGREF9"
                }
            ]
        },
        {
            "text": "The procedure for generating expressions follows the same pattern a person would use to create a logical expression. The interface will provide a natural flow to help the users to create an expression as if they are typing it. They may start with selecting a data element or variable such as \u2018SEX\u2019, then a logical operator like \u2018=\u2019, and finally a value like \u2018MALE\u2019 or \u2018FEMALE\u2019. The user can add \u2018AND\u2019 or \u2018OR\u2019 and create the next expression using this same process.",
            "cite_spans": [],
            "section": "Natural flow ::: Methods",
            "ref_spans": []
        },
        {
            "text": "The user can interject expressions in the middle of a query, remove parts of the query, or undo the last change made to the query. As changes are being made, the tool validates the entire query in the background and provides instant feedback. This method of constructing queries is more intuitive to the users than that of creating all the individual expressions first and then joining them together.",
            "cite_spans": [],
            "section": "Natural flow ::: Methods",
            "ref_spans": []
        },
        {
            "text": "Once the data source is selected, a list of core data elements is provided in a list box. From the list box the user can select a data element. Based on the type of the data element, a list of valid logical operators for that data element is placed in another list box. Figure 6 shows the list of valid operators for text fields.",
            "cite_spans": [],
            "section": "Natural flow ::: Methods",
            "ref_spans": [
                {
                    "start": 270,
                    "end": 278,
                    "mention": "Figure 6",
                    "ref_id": "FIGREF10"
                }
            ]
        },
        {
            "text": "In cases such as zip code and syndrome, \u2018=\u2019 and \u2018<>\u2019 operators are also valid. For age the operators \u2018>\u2019, \u2018<\u2019, \u2018<=\u2019, and \u2018>=\u2019 are added to the list. Once the user selects a data element, a list of valid values pertaining to the data element is listed in yet another list box. The user can select one or more of these values, and if more than one value is selected the user can choose to group these values using \u2018AND\u2019 or \u2018OR\u2019. Note that the AQT generates the expression in a left to right progression in the same manner as one typing the expression (Figure 7).",
            "cite_spans": [],
            "section": "Natural flow ::: Methods",
            "ref_spans": [
                {
                    "start": 550,
                    "end": 558,
                    "mention": "Figure 7",
                    "ref_id": "FIGREF11"
                }
            ]
        },
        {
            "text": "The next step is to add this expression to the query. By clicking on the \u201cAdd Expression\u201d button, the expression is pasted at the cursor location in the query area. One can add more expressions to this query by clicking AND or OR buttons and following the same process (Figure 8).",
            "cite_spans": [],
            "section": "Natural flow ::: Methods",
            "ref_spans": [
                {
                    "start": 270,
                    "end": 278,
                    "mention": "Figure 8",
                    "ref_id": "FIGREF12"
                }
            ]
        },
        {
            "text": "The AQT helps users quickly identify limits for variables with large sets of values. Because data elements such as zip codes and ICD-9 codes have a lot of values for dropdown lists, finding a particular value in these list boxes is very cumbersome. The tool provides an intermediate step for filtering these options into a more manageable list (Figure 9). For example, if the investigators are interested in data from certain zip codes in a state, they can reduce the options by typing the first two digits of the zip code and thereby filtering the list.",
            "cite_spans": [],
            "section": "Natural flow ::: Methods",
            "ref_spans": [
                {
                    "start": 345,
                    "end": 353,
                    "mention": "Figure 9",
                    "ref_id": "FIGREF13"
                }
            ]
        },
        {
            "text": "The tool will generate valid expressions and provide a mechanism to check the query expressions when a user types parts or all of them. Every time an expression is generated by the tool and the Add Expression button is clicked, the tool examines the entire query expression, checking it against the syntax rules. Before saving or executing the expression the AQT automatically checks the syntax and if it detects any syntax errors it will provide meaningful error messages in the message area (Figure 10). Additionally, at any point the user can click on the validate button and check the syntax.",
            "cite_spans": [],
            "section": "Validation ::: Methods",
            "ref_spans": [
                {
                    "start": 494,
                    "end": 503,
                    "mention": "Figure 10",
                    "ref_id": "FIGREF1"
                }
            ]
        },
        {
            "text": "Frequently, investigators want to execute a query over time, run the same query with different values, or use the query inside more complex queries. Similarly as all the other data elements (zip code, syndrome, region, etc.), the permanent storage and retrieval of queries (File system, database, or any other mechanism) are the responsibility of the disease surveillance system. The AQT is merely an interface to assist the investigators with their research by hiding the complexity and inner workings of the underlying data model.",
            "cite_spans": [],
            "section": "Save and share queries ::: Methods",
            "ref_spans": []
        },
        {
            "text": "Once the users define the desired query they can click on [Save Public Expression] or [Save Private Expression] buttons. If the query is valid, the screen provides an area to enter a unique name for the query (Figure 11).",
            "cite_spans": [],
            "section": "Save and share queries ::: Methods",
            "ref_spans": [
                {
                    "start": 210,
                    "end": 219,
                    "mention": "Figure 11",
                    "ref_id": "FIGREF2"
                }
            ]
        },
        {
            "text": "If the query is successfully validated the AQT passes the name and query expression to the surveillance system. It is the surveillance system\u2019s responsibility to confirm that the query\u2019s name is unique and provide feedback to the AQT the success or failure of the save operation. Based on the feedback received the AQT provides an appropriate message in the message area.",
            "cite_spans": [],
            "section": "Save and share queries ::: Methods",
            "ref_spans": []
        },
        {
            "text": "In a collaborative environment users would like to share their findings and queries with others. Providing the capability to save and share the queries for collaborative use enables others in the user community to run these queries as they are or to make the modifications necessary to help with their own investigations. The AQT facilitates saving public queries by providing an interface similar to saving private queries (Figure 11). The surveillance system should implement the inner workings of the permanent storage and retrieval of public queries.",
            "cite_spans": [],
            "section": "Save and share queries ::: Methods",
            "ref_spans": [
                {
                    "start": 425,
                    "end": 434,
                    "mention": "Figure 11",
                    "ref_id": "FIGREF2"
                }
            ]
        },
        {
            "text": "The next step is retrieving these saved queries. There are two options in the data element list box in the query builder section of the AQT: one option is for retrieving the private saved queries, and the other option is for retrieving public saved queries (Figure 12). Upon selection of either one, a list of corresponding queries will be presented to the users. This list includes the text of the query and the unique name given to that query. By clicking on the query name the saved query will be added to the expression in the Query area.",
            "cite_spans": [],
            "section": "Save and share queries ::: Methods",
            "ref_spans": [
                {
                    "start": 258,
                    "end": 267,
                    "mention": "Figure 12",
                    "ref_id": "FIGREF3"
                }
            ]
        },
        {
            "text": "At this point users can add more conditions to the same query, such as specifying a zip code, changing the value for age, etc.",
            "cite_spans": [],
            "section": "Save and share queries ::: Methods",
            "ref_spans": []
        },
        {
            "text": "The final objective of this project is for the AQT to have the capability to be used with most web-based surveillance systems. One can think of the AQT as a widget, or an add-on with some defined interfaces. The back end can be implemented in a variety of popular technologies such as .NET, Java Servlet, or any other server technology as long as it can communicate via an http protocol. The surveillance system has to provide the interfaces that supply values for the different parts of the screen, and the functionality to parse the final query text and run it against the underlying database.",
            "cite_spans": [],
            "section": "Portability ::: Methods",
            "ref_spans": []
        },
        {
            "text": "Making the tool adaptable to many web-based systems requires the AQT to contain all the processing dynamically, including validating the query syntax and changing the contents of the list boxes. In a web-based environment, this means using browser components such as HTML, Cascading Style Sheets (CSS) [13], JavaScript, and the Document Object Model (DOM) [14] to implement application logic. In developing AQT, we utilized HTML, JavaScript, and AJAX (Asynchronous JavaScript and XML) and placed all the processing on the local machine to avoid any server dependency.",
            "cite_spans": [
                {
                    "start": 303,
                    "end": 305,
                    "mention": "13",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 357,
                    "end": 359,
                    "mention": "14",
                    "ref_id": "BIBREF5"
                }
            ],
            "section": "Portability ::: Methods",
            "ref_spans": []
        },
        {
            "text": "We used JavaScript to apply validation, data handling, and screen processing on the browser side, and AJAX for communicating with server applications. AJAX is used for creating interactive web applications and is a cross-platform technique usable on many different operating systems, computer architectures, and web browsers, because it is based on open standards such as JavaScript and XML. The intent of this technique is to make web pages more responsive by exchanging small amounts of data with the server behind the scenes, so that the entire web page does not have to be reloaded each time the user requests a change. This feature increases the web page\u2019s interactivity, speed, functionality, and usability. AJAX is asynchronous in that loading does not interfere with normal page loading.",
            "cite_spans": [],
            "section": "Portability ::: Methods",
            "ref_spans": []
        },
        {
            "text": "The AQT uses AJAX calls to obtain required data for populating the different list boxes on the screen. For example, when the user selects a data source the tool calls the surveillance system, passes the selected data source, gets a list of data elements from the server (the surveillance system), and then populates the data element list box. The communication to the server is done by an AJAX call, and the JavaScript processes the returned data and populates the list.",
            "cite_spans": [],
            "section": "Portability ::: Methods",
            "ref_spans": []
        },
        {
            "text": "ESSENCE has been one of the early adaptors of AQT. Although the capability to create efficient custom queries for emergency room chief complaints data existed prior to the AQT, the query building process was cumbersome and not user-friendly. It was easy to make syntax errors while typing a query, and there was no mechanism to validate the logic of the query statement. Furthermore, while \u201cAND\u201d and \u201cOR\u201d and \u201cANDNOT\u201d expressions were possible, there was no method to construct complex Boolean operations with parentheses to clarify the order of operations. The previous capability allowed the user to base the custom query on Data Source, Geography System, or Medical Grouping System, however, since the selections were not part of the query statement they could not be modified without returning to the pre-selection screens and re-starting the query process. Additionally, the original capability did not allow for querying of data beyond the fundamental chief complaints-level. The following screen shot shows the query options that were available with the original feature. A sample chief complaints query designed to capture Influenza-Like-Illness is shown in Figure 13.",
            "cite_spans": [],
            "section": "Implementation",
            "ref_spans": [
                {
                    "start": 1166,
                    "end": 1175,
                    "mention": "Figure 13",
                    "ref_id": "FIGREF4"
                }
            ]
        },
        {
            "text": "The AQT not only contains several capabilities that were not previously available, but also provides an intuitive user-friendly interface that allows the user to build simple or highly complex queries more easily. Two new features in the AQT are parentheses, which allow the user to clarify the order of operations, and the ability to select variables such as Region, Zipcode, Hospital, Syndrome, Sub-syndrome, Chief Complaint, Age, and Sex, as part of the query statement. This allows for easy query modifications. Additionally, the AQT lets the user query data beyond the fundamental chief complaints level into a more sensitive Sub-syndrome or Syndrome level. It also allows users to develop queries that contain combinations of chief complaints, syndromes, and sub-syndromes into one query. The query can also contain combinations of different geographies such as zipcodes and regions. This capability is not available without AQT.",
            "cite_spans": [],
            "section": "Implementation",
            "ref_spans": []
        },
        {
            "text": "During the query building process the AQT automatically validates the logic of query expression as it is created, and the user has the option to conduct a final validation prior to executing the query. This feature allows the user to quickly identify syntax errors and correct them before adding further complexity or executing the query. The following screen shot (Figure 14) shows the query options available within the AQT feature. A sample chief complaints query designed to capture Influenza-Like-Illness in Region_A is shown.",
            "cite_spans": [],
            "section": "Implementation",
            "ref_spans": [
                {
                    "start": 366,
                    "end": 375,
                    "mention": "Figure 14",
                    "ref_id": "FIGREF5"
                }
            ]
        },
        {
            "text": "We believe that the AQT will provide an interface that can assist public health investigators in generating complex and detailed case definitions. The interface supports saving queries for future use and sharing queries with others in the user community. The interface is intuitive and accommodates both novice and experienced users. Finally, the AQT is a self-contained tool that can be plugged into most web-based disease surveillance systems with relative ease.",
            "cite_spans": [],
            "section": "Conclusions",
            "ref_spans": []
        }
    ],
    "ref_entries": {
        "TABREF0": {
            "text": "Table 1: Potential analysis combinations using multiple data sources in combinations\n",
            "type": "table"
        },
        "FIGREF0": {
            "text": "Figure 1: Running multiple inquires as one query",
            "type": "figure"
        },
        "FIGREF1": {
            "text": "Figure 10: Validate the query expression",
            "type": "figure"
        },
        "FIGREF2": {
            "text": "Figure 11: Saved and shared queries",
            "type": "figure"
        },
        "FIGREF3": {
            "text": "Figure 12: Retrieve saved public and private queries",
            "type": "figure"
        },
        "FIGREF4": {
            "text": "Figure 13: Influenza-like-illness query",
            "type": "figure"
        },
        "FIGREF5": {
            "text": "Figure 14: Influenza-like-illness query for region A",
            "type": "figure"
        },
        "FIGREF6": {
            "text": "Figure 2: Advanced Querying Tool interface",
            "type": "figure"
        },
        "FIGREF7": {
            "text": "Figure 3: Different data elements for each data source",
            "type": "figure"
        },
        "FIGREF8": {
            "text": "Figure 4: Generate query expression",
            "type": "figure"
        },
        "FIGREF9": {
            "text": "Figure 5: Wildcard in expressions",
            "type": "figure"
        },
        "FIGREF10": {
            "text": "Figure 6: Valid operators for long text fields",
            "type": "figure"
        },
        "FIGREF11": {
            "text": "Figure 7: Select multiple values",
            "type": "figure"
        },
        "FIGREF12": {
            "text": "Figure 8: Add expressions to the query",
            "type": "figure"
        },
        "FIGREF13": {
            "text": "Figure 9: Filter value list",
            "type": "figure"
        }
    },
    "back_matter": [],
    "bib_entries": {
        "BIBREF0": {
            "title": "",
            "authors": [],
            "year": 2007,
            "venue": "The World Health Report 2007 - a safer future: global public health security in the 21st century",
            "volume": "",
            "issn": "",
            "pages": null,
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF1": {
            "title": "Physicians\u2019 use of electronic medical records: barriers and solutions",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Miller",
                    "suffix": ""
                },
                {
                    "first": "I",
                    "middle": [],
                    "last": "Sim",
                    "suffix": ""
                }
            ],
            "year": 2004,
            "venue": "Health Affairs",
            "volume": "23",
            "issn": "2",
            "pages": "116-126",
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF2": {
            "title": "ESSENCE II and the framework for evaluating syndromic surveillance systems",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Lombardo",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Burkom",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Pavlin",
                    "suffix": ""
                }
            ],
            "year": 2004,
            "venue": "MMWR Morb Mortal Wkly Rep",
            "volume": "53",
            "issn": "suppl.",
            "pages": "159-165",
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF3": {
            "title": "Standardizing Clinical Condition Classifiers for Biosurveillance",
            "authors": [],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": null,
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF4": {
            "title": "",
            "authors": [
                {
                    "first": "DS",
                    "middle": [],
                    "last": "McFarland",
                    "suffix": ""
                }
            ],
            "year": 2006,
            "venue": "CSS: the missing manual",
            "volume": "",
            "issn": "",
            "pages": null,
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF5": {
            "title": "",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Flanagan",
                    "suffix": ""
                }
            ],
            "year": 2006,
            "venue": "JavaScript: the definitive guide",
            "volume": "",
            "issn": "",
            "pages": null,
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF6": {
            "title": "Electronic communication and the future of international public health surveillance",
            "authors": [
                {
                    "first": "T",
                    "middle": [],
                    "last": "Vacalis",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Bartlett",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Shapiro",
                    "suffix": ""
                }
            ],
            "year": 1995,
            "venue": "Emerg. Infect. Dis",
            "volume": "1",
            "issn": "1",
            "pages": "34-35",
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF7": {
            "title": "Planning a public health surveillance system",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Teutsch",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Thacker",
                    "suffix": ""
                }
            ],
            "year": 1995,
            "venue": "Epidemiol. Bull",
            "volume": "16",
            "issn": "1",
            "pages": "1-6",
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF8": {
            "title": "A statistical algorithm for the early detection of outbreaks of infectious disease",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Farrington",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Andrews",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Beale",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Catchpole",
                    "suffix": ""
                }
            ],
            "year": 1996,
            "venue": "J. R. Statist. Soc. A",
            "volume": "159",
            "issn": "3",
            "pages": "547-563",
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF9": {
            "title": "Epidemiology and cause of severe acute respiratory syndrome (SARS) in Guangdong, People\u2019s Republic of China, in February, 2003",
            "authors": [
                {
                    "first": "N",
                    "middle": [],
                    "last": "Zhong",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Zheng",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Poon",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Xie",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Chan",
                    "suffix": ""
                }
            ],
            "year": 2003,
            "venue": "Lancet",
            "volume": "362",
            "issn": "",
            "pages": "1353-1358",
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF10": {
            "title": "Challenges faced by hospital healthcare workers in using a syndrome-based surveillance system during the 2003 outbreak of Severe Acute Respiratory Syndrome in Taiwan",
            "authors": [
                {
                    "first": "F-Y",
                    "middle": [],
                    "last": "Shih",
                    "suffix": ""
                },
                {
                    "first": "M-Y",
                    "middle": [],
                    "last": "Yen",
                    "suffix": ""
                },
                {
                    "first": "J-S",
                    "middle": [],
                    "last": "Wu",
                    "suffix": ""
                },
                {
                    "first": "F-K",
                    "middle": [],
                    "last": "Chang",
                    "suffix": ""
                },
                {
                    "first": "L-W",
                    "middle": [],
                    "last": "Lin",
                    "suffix": ""
                },
                {
                    "first": "M-S",
                    "middle": [],
                    "last": "Ho",
                    "suffix": ""
                }
            ],
            "year": 2007,
            "venue": "Infect. Control and Hosp. Epidemiol",
            "volume": "28",
            "issn": "3",
            "pages": "354-357",
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF11": {
            "title": "",
            "authors": [],
            "year": 2003,
            "venue": "ICD9CM Expert for Hospitals",
            "volume": "",
            "issn": "",
            "pages": null,
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF12": {
            "title": "Improving safety with information technology",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Bates",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Gawande",
                    "suffix": ""
                }
            ],
            "year": 2003,
            "venue": "New England Journal of Medicine",
            "volume": "348",
            "issn": "",
            "pages": "2526-2534",
            "other_ids": {
                "DOI": []
            }
        },
        "BIBREF13": {
            "title": "Can electronic medical record systems transform health care? Potential health benefits, savings, and costs",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Hillestad",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Bigelow",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Bower",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Girosi",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Meili",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Scoville",
                    "suffix": ""
                }
            ],
            "year": 2005,
            "venue": "Health Affairs",
            "volume": "24",
            "issn": "5",
            "pages": "1103-1117",
            "other_ids": {
                "DOI": []
            }
        }
    }
}