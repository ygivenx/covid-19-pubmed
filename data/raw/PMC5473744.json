{"title": "Inbred Strain Variant Database (ISVdb): A Repository for Probabilistically Informed Sequence Differences Among the Collaborative Cross Strains and Their Founders", "body": "For all Sanger Institute sequencing variant positions that are exonic (or 100 bp upstream or downstream), polymorphic between CC founders, and correspond to SNP/indels, the ISVdb provides conveniently accessible information on the following:\n\nAll information in the ISVdb is associated with a probability, to reflect the uncertainty of inference (discussed in the next section). The ISVdb interface is designed to be practical and oriented toward concrete tasks. For example, the ISVdb could be used to answer the following questions:\n\nThe primary purpose of the ISVdb is to provide genome-wide, inferred CC genotypes. However, this inference depends on several processes and measurements that are themselves imprecise: (1) sequencing of founder strains was imperfect so some founder variant calls are ambiguous or incorrect; (2) uncertainty in the sparse, genotyping-based estimates of CC diplotypes; and (3) the CC strains themselves are still segregating in some regions.\n\nProperly representing and accounting for such sources of uncertainty is essential to avoid inaccuracies in downstream inference. Consider the effect of diplotype uncertainty on predicting the functional consequences of the alleles in an F1 hybrid from two CC mice.\n\nSuppose one of the CC parents had a 40:30:30 probability of AJ/AJ vs. 129/129 vs. NOD/NOD diplotype, where AJ carries a synonymous mutation, whereas 129 and NOD both carry a stop-gain mutation. Assuming the most likely diplotype, AJ/AJ, would imply a synonymous mutation in the F1, even though there is a greater (60%) probability of a stop-gain mutation.\n\nThe closest similar resource to the ISVdb, the CC \u201cpseudogenomes\u201d set, (Morgan and Welsh 2015; Huang et al. 2013) was designed primarily for sequence alignment: it employs most-likely point estimates of genotype and assumes that all alleles are fixed. Therefore, a key secondary goal of the ISVdb is to provide a resource that retains all of the aforementioned uncertainty in CC and F1 genotype inference. The ISVdb achieves this by storing multiple records per variant, in which each record includes a probability of that variant state.\n\nAll inputs are based on the GRCm38 mouse reference assembly. Probabilistic estimates of CC unphased diplotypes were computed as of March 24, 2016. These diplotype estimates were derived from a HMM applied to MegaMUGA microarray measurements (Morgan and Welsh 2015).\n\nFounder variants were determined using the Sanger Institute Mouse Genomes Project mouse variant VCF files, REL-1410 (from October 2014), corresponding to Ensembl release 75 of GRCm38 (Keane et al. 2011). These VCF files included SNPs and indels (1\u2013100 bp). Exon boundaries were drawn from Ensembl release 75 as well (Ramasamy et al. 2013).\n\nBy tracing the potential transmission path of alleles from founders to CC strains, an expression can be derived for the probabilistic distribution of the unphased CC genotype, entirely in terms of known quantities. That is, we can derive an expression for the unphased CC genotype at each founder variant position, in terms of known unphased founder genotype probabilities from sequencing, and known unphased MegaMUGA haplotyping at markers. Along the way, we can also derive the probability distributions of the CC diplotypes. The equations below are specific to a given variant; they need to be recalculated for every founder variant and CC strain combination.\n\nFirst, note that the unphased CC genotype probability distribution can be defined in terms of that of the phased CC genotype:p(UGc={a,a\u2032})=p(Gc=(a,a\u2032))+p(Gc=(a\u2032,a)),(1)where UGc is the unphased genotype of CC strain c, {a,a\u2032} is an unphased genotype with (possibly identical) alleles a and a\u2032,\nGc is the phased genotype of CC strain c, and (a,a\u2032) is a phased genotype such that a is inherited maternally and a\u2032 is inherited paternally.\n\nThe probability of the (typically unobservable) phased CC genotype can be expressed in terms of phased founder diplotype as:p(Gc=(a,a\u2032))=\u2211(h,h\u2032)\u2208 H \u00d7 Hp(Gc=(a,a\u2032)|Dc=(h,h\u2032))\u22c5p(Dc=(h,h\u2032)),(2)where Dc is the phased diplotype of c at the variant, (h,h\u2032) describes the phased diplotype composed of (possibly identical) haplotypes h and h\u2032, which transmit alleles a and a\u2032 respectively, and H is the set of all haplotypes.\n\nAssuming maternal and paternal alleles are transmitted independently, the first term in the product of the right hand side of (2) can be expressed as:p(Gc=(a,a\u2032)|Dc=(h,h\u2032))=p(Th=a)\u22c5p(Th\u2032=a\u2032),(3)where Th is the allele transmitted from parental haplotype h. Th in turn depends on the founder h genotype, which is uncertain due to potential sequencing error, and on the number of a alleles in that founder genotype, which could be zero (homozygous for the minor allele), two (homozygous for the major allele), or even one (heterozygous) as some loci are not fully inbred in the founders. Assuming transmission of either copy is equally likely,p(Th=a)=\u2211g\u2208G(12number of a alleles in g)\u22c5p(UGh=g),(4)where UGh is the unphased genotype for the founder of haplotype h, G = the set of all possible genotypes and g is a genotype.\n\nThe second term in the product within Equation (2), p(Dc=(h,h\u2032)), also needs to be derived in terms of known values: we do not know the probability of a given diplotype at any arbitrary variant position. Rather, we do know diplotype probabilities of the markers to the left and right of each variant position. As such, we can linearly interpolate between the two markers:p(Dc=(h,h\u2032))=wl\u22c5p(D(c,l)=(h,h\u2032))+wr\u22c5p(D(c,r)=(h,h\u2032))wl+wr,(5)where wl and wr are the distances from the variant position to the left-nearest and right-nearest haplotyping markers, respectively. D(c,l) and D(c,r) are the phased diplotypes of the cc strain at the left-nearest and right-nearest haplotyping markers, respectively.\n\nEquation (5) is expressed in terms of phased diplotypes, but our observed MegaMUGA marker diplotype probabilities are unphased. If we assume that both phasings are equally likely, then for the left marker (similarly for the right),p(D(c,l))=12p(UD(c,l))(6)where UD is the unphased diplotype. The probabilities of each unphased diplotype are known from microarray assays of the CC strains.\n\nThis concludes the derivation: using (1)\u2013(6), the unphased CC genotype distribution, p(UGc), can be fully expressed from known unphased founder genotype distribution p(UGh) and known unphased CC marker diplotype distributions p(UD(c,m)).\n\nOnce CC genotype/diplotype probabilities have been inferred, unphased genotype/diplotype probabilities for F1 offspring between CC strains and/or founder strains can be inferred as well. As in the previous derivation, we can begin by expressing unphased genotype in terms of phased genotype:p(UG12={a,a\u2032})=p(G12=(a,a\u2032))+p(G12=(a\u2032,a)),(7)Where UG12 is the unphased genotype of the offspring of inbred strain 1 and inbred strain 2. G12 is the phased genotype.\n\nEach phased genotype can then be rewritten in terms of the alleles transmitted from its parent strains. Assuming transmission of an allele from strain 1 is independent of transmission of an allele from strain 2,p(G12=(a,a\u2032))=[p(T1=a)\u22c5p(T2=a\u2032)+p(T1=a\u2032)\u22c5p(T2=a)]/2(8)Combining (7), (8), and (4), the unphased offspring genotype distribution can be expressed in terms of known quantities. Diplotype probabilities for F1 offspring can be derived nearly identically.\n\nFunctional consequences per variant, and per transcript, have been predicted in the founder strains by the variant effect predictor (McLaren et al. 2010). We assume that any CC strain inheriting a founder\u2019s haplotype inherits the same transcripts and functional consequences as were in the founder in that haplotype region. This assumption, that the genetic background will not affect functional consequence, is not necessarily true; if a recombination event were to occur within a gene (joining the sequence of two different founders into the same gene in a CC strain) and was upstream of some variant, that variant might no longer have the same effect. Nonetheless, our assumption is mostly reasonable: given the relatively small number of recombinations per CC line\u2014on average 135 (Srivastava et al. 2017)\u2014the number of midgene recombinations is necessarily small, and an even smaller number of these recombinations will actually have an effect on downstream variants. What might in fact be problematic to functional prediction within the CC, more so than within-gene recombination, is the original process by which functional consequences were predicted in the founder strains: predictions were made a single variant at a time, without accounting for other, potentially compensatory variants within the same gene.\n\nOf note, functional consequences in the ISVdb are represented as uncertain; i.e., the probability of a given CC genotype is also applied to the functional consequence of that genotype.\n\nScripts to parse VCF and haplotype files, perform genotype and diplotype inference, and store the resulting processed information in a MariaDB database, were implemented using a combination of Python, VCFtools (Danecek et al. 2011), and R (R Core Team 2015). The ISVdb online GUI was implemented using the Python Flask library. The GUI was deployed online on the Carolina Cloud Apps managed platform, provided by UNC Information Technology Services.\n\nTwo sets of tables are stored within the MariaDB database: (1) an almost completely normalized set of tables with minimal redundancy and (2) a set of prejoined, nonnormalized tables derived from the normalized table that are designed to allow the GUI (which provides for typical ISVdb use cases) to return results efficiently, using a minimum number of joins. This second set of tables was an intentional trade-off of space for time.\n\nA few additional database optimizations of note were necessary, especially to rapidly generate probabilistic variant states for F1 crosses. In particular, the ISVdb.v1.1 \u201cdatabase\u201d is actually implemented (using R code) as a collection of smaller databases, in which each smaller database represents a single chromosome. Where applicable, most tables were indexed by variant and strain. Tables sizes were reduced by dropping those variant diplotypes (and corresponding genotypes) whose probability was < 0.001. Consequently, probability distributions at some variants may not sum exactly to 1.\n\nThe ISVdb version corresponding to this publication is ISVdb.v1.1, uploaded on March 15, 2017. A frozen snapshot of ISVdb.v1.1, including the v1.1 website interface and the variant information it provides, will be maintained at http://isvdb.unc.edu/archive. Subsequent ISVdb versions will be housed in the archive as well. The frozen ISVdb.v1.1 contents, and the inputs used to generate those contents, are also permanently stored on Zenodo at https://doi.org/10.5281/zenodo.399474 (Oreper et al. 2017b). All ISVdb.v1.1 results can be recreated from Supplemental Material, File S8 and File S9, which are briefly described below, and in further detail in File S1. As subsequent versions of ISVdb are developed, their contents will also be archived (at another location) on Zenodo.\n\nFor ISVdb.v1.1: File S1 contains detailed descriptions of all supplemental files; File S2 contains marker diplotype data for CC strains; File S3 contains nonmitochondrial SNPs for founders; File S4 contains indels for founders; File S5 contains mitochondrial SNPs for founders; File S6 contains the custom format specification for these VCF files; File S7 contains BL37.75 exons (along with other genomic features); File S8 contains an ISVdb.v1.1 dump of the imputed CC diplotypes per strain and per chromosome, in CSV format; and File S9 contains an ISVdb.v1.1 dump of the imputed CC genotypes per strain and per chromosome, in CSV format.\n\nCode used to generate the ISVdb and its GUI is available at https://github.com/danoreper/ISVdb.git (Oreper et al. 2017a).\n\nThe intended interface to ISVdb data is through the publicly accessible ISVdb GUI, hosted at http://isvdb.unc.edu; the GUI allows what we believe to be the most common types of queries.\n\nThe ISVdb GUI can be broken up into roughly three panels:\n\nAdditionally, the GUI provides: (i) a link to complete archived versions of the ISVdb and (ii) a link to CSV dump files of genotype and diplotype, per strain, per chromosome.\n\nThe ISVdb is most typically used to determine the genotype of a set of CC strains in some region. When the ISVdb GUI is queried for genotype, it produces a table with the following columns:\n\nThe unphased genotype (allele_1 and allele_2 are arbitrary):\n\nWe provide an example of a genotype query to illustrate a partial ISVdb workflow, and also to demonstrate how uncertainty is represented in the ISVdb by storing multiple rows for a single variant in a single strain. Details are provided in the Figure 2 caption.\n\nGenotype queries are just one of the four types of queries enabled by the ISVdb GUI. The remaining types of ISVdb queries are almost identical to a genotype query, and all of them represent uncertainty in the same manner as a genotype query. Rather than describing them exhaustively, we will emphasize how each differs from a genotype query.\n\nThe basis for the current version of ISVdb variant calls is integration of MegaMUGA genotyping data from the MRCAs of each CC strain with the sequencing data from a single mouse per founder strain (Keane et al. 2011; Fu et al. 2012; Srivastava et al. 2017) Consequently, the ISVdb currently has important limitations regarding completeness, heterozygosity, and imputation precision. With regard to completeness, in the generations since the MRCAs, additional mutations have accumulated and, thanks to the extremely small effective population size within each CC strain, rapidly become fixed. Sequencing results suggest that the number of variants now segregating in the CC has increased by 2% since the MRCA generation. (Srivastava et al. 2017). Similarly, many of the regions harboring residual heterozygosity in the MRCA animals have by now become fixed. Regarding the precision of the imputation itself, the ability to construct the underlying haplotype mosaic is limited by, among other things, the resolution of the MegaMUGA genotyping array (or of any array), and particularly how well that array can mitigate the inherent difficulties arising with inferring haplotype state at recombination breakpoints and regions of identity-by-descent between founders. Our imputed variants thus reflect an incomplete and uncertain view of the current generation\u2019s CC genomes.\n\nTo address these limitations and gain a deeper understanding of the CC population, finer resolution data from a more recent breeding generation has been collected: the genome of a single male per CC strain has been sequenced (Srivastava et al. 2017), and this will not only identify the de novo CC mutations but also reduce the uncertainty in CC strain genotypes at known variants. Nonetheless, since sequencing is limited to a single animal per strain, it does not by itself provide a definitive answer genome-wide, largely due to residual heterozygosity. In the near future, a set of three other males per strain from the sequencing generation will be genotyped on the MUGA platform (Fernando Pardo-Manuel de Villena, personal communication).\n\nThe ISVdb will progressively incorporate these new sets of data into its variant representation according to the following release schedule:IDVdb.v1.1 (March 15, 2017): the current ISVdb version, corresponding to this publication.ISVdb.v1.2 (\u223cJune 2017): inclusion of the whole genome (rather than exons \u00b1 100 bp as in ISVdb.v1.1), and the incorporation of the latest MGP sequencing of the founder panel (REL-15.04).ISVdb.v2.0 (\u223cJuly 2017): inclusion of sequenced de novo variants as new records in the ISVdb. This depends on projected availability of the sequencing data, which is expected in April 2017.ISVdb.v2.1 (\u223cSep 2017): inclusion of a first pass at integration of sequencing and same-generation MUGA genotyping, to better impute state at known (rather than de novo) variants: where sequencing and MUGA variant calls are inconsistent, ISVdb probabilities will be some sort of weighted sum of the data sources. Depends on projected availability of MUGA genotyping data, expected in July 2017.ISVdb.v3.0 (\u223cDecember 2017): (a) a more sophisticated method of modeling the inconsistencies between and among genotyping and sequencing data to arrive at better estimates of genotype uncertainty and residual heterozygosity; (b) this may be coupled with reestimation of the founder genotypes themselves using CC sequencing data, which indirectly provide us with ultradeep founder sequencing and could be thought of as ancestral variant imputation; and (c) inclusion of indels/SNPs for the whole genome rather than only for exons.ISVdb.v3.1 (\u223cFebruary 2018): inclusion of structural variants (> 100 bp) and submission of a follow-up publication describing the latest developments.\n\nAs the reference genome and its exon annotations changes, the ISVdb will be updated as well.\n\nIn addition to updating the ISVdb with more accurate state, incorporation of the newest high-resolution data will allow a useful comparison between generations. In particular, detection of loci that have become fixed since the MRCA generation will open a new line of inquiry as to the possible selective advantage of the newly fixed alleles.\n\nIn summary, we have developed a database that stores imputed probabilistic variant state for CC strains and founder strains, and can rapidly generate probabilistic variants states for F1 populations. Imputed state includes alleles as well as predicted functional consequences of those alleles. This resource is a useful complement to sequencing data, and is easily accessible at http://isvdb.unc.edu."}