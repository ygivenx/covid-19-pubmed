{"title": "Using cellular automata to generate image representation for biological sequences", "body": "The success of human genome project has generated deluge of sequence information. Sequence databases, such as GenBank and EMBL, have been growing at an exponential rate (Venter et al., 1996; Chou, 2002; Chou, 2004) . In general, gene sequences are stored in the computer database system in the form of long character strings. It would act like a snail's pace for human beings to read these sequences with the naked eyes. Also, it is very hard to extract any key features by directly reading these sequences. However, if they can be converted to some diagrams (see, e.g., Chou and Zhang, 1992; Zhang and Chou, 1994) , some important features can automatically manifested and become easily visible.\n\nThe question of how to visualize gene sequence is an important topic today (Hu et al., 2003; Kashuk et al., 2002; Liu et al., 2002; Mayor et al., 2000; Nandy, 1996; Randic et al., 2000) . Previous effort in biological sequence visualization was focused on single sequence representations. About 20 years ago, the first 3D (dimensional) H curve was proposed to represent a DNA sequence (Hamori, 1985; Hamori and Ruskin, 1983) . Subsequently, a graphic representation of DNA sequences was suggested using Barnsley's iterative function (Jeffrey, 1990) . Later, a different method was proposed thru the iterative function system (Roman-Roldan et al., 1994; Tino, 1999) . By extrapolating the work of Hamori and Jeffrey, a different iterative method called W-curves was presented (Wu et al., 1993) . Meanwhile, a diagrammatical approach for codon usage were also proposed (Chou and Zhang, 1992; Zhang and Chou, 1994) . Gates (1985) proposed a 2D graphical representation that is simpler than the H curve. However, Gates's graphical representation has high degeneracy. Guo took an ulterior step and proposed a novel 2D graphical representation of DNA sequences of low degeneracy (Guo et al., 2001) . In 2003, Yau presented a representation without degeneracy (Yau et al., 2003) .\n\nIn parallel to the above development, various representations for protein sequences have also been proposed. Williams et al. (1995) used five vertical spaces to represent each amino acid position, with the spaces filled according to the chemical properties of the residues. This leads to sequences resembling Morse code, with some structural features highlighted by the resulting pattern of dots. The properties of a protein's amino acids may also be visualized in the form of a line graph, for example, protein rhodopsin is showed using the hydropathic scale (Alston et al., 2003) . Chou et al. (1997) first introduced the elegant ''wenxiang'' diagram to highlight the typical sequence feature of the amphiphilic helices in proteins.\n\nThere is a common characteristic in the aforementioned visual methods for the gene representation, i.e., the point of the special curve corresponding to a certain nucleic acid is colligated only with the base prior to it, while the effects of all the bases behind it are totally ignored. This is inconsistent with the fact that all the bases in a gene are coupled with each other as an entity in nature. In view of this, here a completely new and different method will be introduced to image the gene sequences. The novel method is based on Cellular Automata, as will be illustrated below.\n\nCellular automata are discrete dynamical systems whose behavior is completely specified in terms of a local relation. A cellular automaton can be thought of as a stylised universe consisting of a regular grid of cells, each of which can be in one of a finite number of k possible states, updated synchronously in discrete time steps according to a local, identical interaction rule (Wolfram, 1986) . Cellular automata provide us an access to model complex dynamical phenomena by reformulating the macroscopic behavior into microscopic and mesoscopic rules that are discrete in space and time. A set of rules specifies the time and space evolution of the system, which is discrete in both variables. These systems have attracted a great deal of interest in recent years because even with very simple rules cellular automata can show very complex evolution patterns. It is recognized that repeated applications of simple rules can lead to extremely complex behavior that can emulate physical, social and biological systems.\n\nA one-dimensional cellular automata consists a collection of timedependent variables S i t , namely the local states, arrayed on a lattice of N sites (or cells), i \u00bc 0; 1; 2; . . . ; N \u00c0 1. We take each of these to be a Boolean variable: S i t \u00bc f0; 1g. As visualization is considered in a twostate automaton, each of the cells can be either black or white. The collection of all local states is called the configuration:\n\nwhere S 0 denotes an initial configuration. The rule F of cellular automata can be expressed as a lookup table that lists, for each local neighborhood, the state that is taken on by the neighborhood's central cell at the next step. A neighborhood comprises a cell and its r neighbors on either side, where r is called the cellular automata radius. The course of state evolving can be represented as:\n\nIf the r is 1, each cell can be either black or white, then this will allows 2 3 \u00bc 8 possible color combinations along the top three cells. Because each of these combinations will cause a cell to be either black or white and there are eight possible upper color combinations then there will be 2 8 \u00bc 256 possibilities in total. In general, if there are K states and if each cell is taken to have N neighbors (including itself), then there are K N rules. We can easily utilize a binary byte to encode these rule sets into decimal numbers between the numbers 0 and 255. For example, rule number 184 would correspond to Fig. 1 . The global equation of motion maps a configuration at one time step to the next; i.e., S t\u00fe1 \u00bc F\u00f0S t \u00de, where the local function is applied simultaneously to all lattice sites.\n\nMolecular biologists seek to determine the genes in the cells of organisms, the function of the proteins that these genes encode, and how these proteins are related evolutionarily across organisms. Genes, composed of RNA, is represented by sequences of nucleic acids, also called bases. The 4 nucleic acids are adenine(A), cytosine(C), guanine(G), uracil(U). To deal with it in a computer, a nucleotide sequence is coded as follows:\n\nProteins are represented by sequences of amino acids, also called residues. There are 20 native amino acids. By means of the similarity rule, complementarity rule, molecular recognition theory and information theory, a set of digital codes are formulated to represent amino acids, as shown in Table 1 . The representation can better reflect the chemical physical properties of amino acids, as well as their structure and degeneracy (Xiao et al., 2004) .\n\nA gene sequence is always a 1D string regardless it is denoted by bases or by binary digits. It is very difficult to find its characteristic vector particularly when it is very long. To cope with this situation, we resort to the images derived from the 1D sequence thru the space-time evolution of cellular automata. The cellular automata we adopt here is a simple twostate, one-dimensional cellular automata, consisting of a line of cells with the value of 0 or 1. The rule is simply implemented as that the nearest cells around the one we focus will decide its next state. Because many genes are circular, we adopt the circulating boundary condition with the iterative formula given by:\n\nD\u00f0i; 0\u00de \u00bc F\u00f0D\u00f0i \u00c0 1; M\u00c2N \u00c0 1\u00de; D\u00f0i \u00c0 1; 0\u00de; D\u00f0i \u00c0 1; 1\u00de\u00de \u00f01 i < n\u00de\n\nD\u00f0i; M\u00c2N \u00c0 1\u00de \u00bc F\u00f0D\u00f0i \u00c0 1; M\u00c2N \u00c0 2\u00de; D\u00f0i \u00c0 1; M\u00c2N \u00c0 1\u00de;\n\nwhere, D\u00f0i; j\u00de is an element of 2D array to present the gene sequence image, F the iterative rule, n the iterative time, and N the length of the gene sequence. If the sequence is composed of RNA, the M \u00bc 2; if the sequence composed of amino acids, the M \u00bc 5. For example, Rule 84 can be illustrated by Fig. 2 . \n\nWhen transforming the 2D array (matrix) into a binary image with visualization techniques, the basic bitmap format is chosen because its property is easily handled. In this way, if the matrix element was zero, the color of the counterpart pixel bit will be black; otherwise, white.\n\nThe total size thus obtained are too large for some long sequences, the compression of the image is needed that is actually to highlight the characteristic of the image concerned the following mathematical mapping:\n\nwhere (x 0 ; y 0 ) denote the coordinates of the pixel in the original image, while (x 1 ; y 1 ) the corresponding coordinates for the transformed image, f x is the scaling along the horizontal axis, and f y the scaling along the vertical axis. The inverse transformation is given by:\n\ni.e.,\n\nThe images of real and simulated gene data will be presented as examples to show how these cellular automata images provide useful information. The aforementioned gene sequences are all downloaded from Genbank: http:==www.ncbi.nlm.nih.gov. To the same sequence, if the evolving rules are different, the images are different. That is to say, 256 different images can be created for a same sequence based on cellular automata. These images can fall into 4 classes. The first class is named balanced, the states of cells been quickly resolved into boring configurations, e.g., all 0 or all 1. The second class is periodic. The third class is of chaos. The fourth class is not disordered, but complex and sometimes long-lived. The evolution rule of the formulation image that we need must generate the features that can be easily used to distinguish whether the gene concerned are homologous to each Fig. 2 . Illustration of a one-dimensional, binary-state, nearest-neighbor (r \u00bc 1) cellular automata with N \u00bc 10. Both the lattice and the rule table F for updating the lattice are illustrated. The lattice configuration is shown at two successive time steps. The cellular automaton has spatially periodic boundary conditions: the lattice is viewed as a circle, with the leftmost cell being the right neighbor of the rightmost cell, and vice versa other. By this way, the bases in a gene or residues in a protein must be coupled with each other as an entity. During the process of producing the gene image, the state of cell corresponding to a certain nucleic acid is colligated with both the base prior to it and bases behind it. Because of above-mentioned characteristics, the gene image can reveal some implicit sequence features, and these features are difficult to be displayed by other gene visualizations. We have found that among the 256 evolving rules some is better than the others in building gene image for a given gene. For example, Rule 184 is most suitable for coronavirus, while Rule 84 is the best for building the image of amino acid sequences.\n\nIf the rule and time for the evolution are all changeless, the gene sequence and image thus produced will be oneto-one correspondence. Because digital coding for amino acid and nucleotide are degeneracy, the images will appear in different cells for the first row at least. Figure 3 shows the comparative image between mouse TGFA gene (P01134) and its recombine gene. The recombine gene only has one difference to P01134 in the 61 th amino acid, phenylalanine to lysine. The method of generating comparative image is for comparing the corresponding bit between the previously generated two pieces of images: if the color is same, the corresponding pixel point on the comparative image will be drawn in the original color; otherwise, the counterpart in the comparative image will be drawn as a red point.\n\nDifferent rules have been applied to analyze the 90 coronavirus, but only when Rule 184 is used, are the images of SARS-CoVs different most distinctively from those of other coronavirus (Wang et al., 2005) . The images obtained directly by the aforementioned procedures are generally too large for analysis. After the images are zoomed out with the compression ratio 14:2 as showed in Fig. 4 , the images of SARS-CoVs are mainly with the V-shaped cross-lines pattern, whereas those of non-SARS virus RNA sequences are mainly with the parallel slashlines pattern. By analyzing the different parts of the fulllength RNA sequence visualized images, a remarkable fingerprint for the SARS-CoV has been found. It is in some regions of the SARS-CoV sequences near 5 0 -terminal Zhang and Chou, 1996) that the occurrence frequencies of repeated character 'A' (i.e., 'AA', 'AAA', and 'AAAA') are obviously greater than those of repeated character 'U' (i.e., 'UU', 'UUU', and 'UUUU'), respectively. However, for all other coronaviruses, the situation is just opposite in the same region; i.e., the occurrence frequencies of 'AA', 'AAA', and 'AAAA' are obviously less than those of 'UU', 'UUU', and 'UUUU'. Therefore, such a unique feature of SARS-CoV can be defined as its fingerprint. Actually, it was found that the number of individual 'A' in the V-shape region of some SARS gene sequences is approximately equal to the number of individual 'U' according to the statistic result. These segments are from 3232 to 5624 nt, 5703 to 7195 nt, 12128 to 14470 nt, 16444 to 19231 nt, and 17928 to 21803 nt in the SARS-CoV sequence near 5-terminal. There is no such a feature in non-SARS coronaviruses, as will be elaborated elsewhere.\n\nBesides, the gene cellular automata image also has the following features as illustrated below. Shown in Fig. 5 is the cellular automata image for a C gene of Hepatitis B virus (HBV) built by the Rule 84. From the figure we can see that the image of HBV C gene has its particular pattern and character. Because the circulating boundary condition was used, the image can be a circle when the right A lot of small triangles are nested into big triangle, and these triangles are all inverted. Therefore, the current method provides a much more intuitive and easier-to-be-identified feature for the complicated gene sequence than the original symbolic sequential expression.\n\nFurthermore, it follows by analyzing the Rule 84 that\n\nD\u00f0i; j\u00de \u00bc 0; D\u00f0i \u00c0 1; j \u00c0 1\u00deD\u00f0i \u00c0 1; j\u00de \u00bc 00 x x; D\u00f0i \u00c0 1; j \u00c0 1\u00deD\u00f0i \u00c0 1; j\u00de 6 \u00bc 00; D\u00f0i \u00c0 1; j \u00fe 1\u00de \u00bc x\n\nwhere x \u00bc f0; 1g, and x x is the inversion of x. Thus, according to Rule 84 we can derive the image for the WIAD gene (Fig. 6 ). Different types of the gene sequences from the same organism were used to test the method. The TGFA and beta-globin major genes are different in their functions. Figures 7 and 9 show the two mouse genes, respectively. It can be seen by comparing the two images that both images are quite different and there is no significant similarity at all. In molecular biology, there are many similarities in their functions and appearances among homology sequences. The sequences of Transforming Growth Factor-Alpha (TGFA) genes are examined. They include homo sapiens (AAA61157, AAH05308, AAH05309, CAA49806), Capreolus (AAF73229), Danio rerio (CAE30382), Sheep (P98135), Rhesus monkey (P55244), Mus musculus (AAB50554), Rabbit (P98138), Chicken (NP_001001614), Norway rat (NP_036803), and Canis familiaris (AAR21186). As shown in Figs. 7, 8, two images of human and mouse are very similar although they are from three different kinds of organisms. In other words, they do have some common features in these two sequences, which are hard to be identified from their Compressed image of the mouse TGFA gene. The sequence is obtained from NCBI GenBank (P01134), its length is 159 amino acids, the compression ratio is 2:2, and the time of evolving is 300 Fig. 8 . Compressed image of the human TGFA gene. The sequence was obtained from NCBI GenBank (AAH05308), its length is 159 amino acids, the compression ratio is 2:2, and the time of evolving is 300 Fig. 9 . Compressed image of the mouse beta-globin major gene. The sequence was obtained from NCBI GenBank (J00413), the compression ratio is 2:2, and the time of evolving is 300 symbolic sequences. These compelling results indicate that the current cellular automat approach is indeed very useful in distinguishing a special gene sequences by providing an inductive image.\n\nFinally, it has not escaped our notice that, with the concept of the pseudo amino acid composition as originally introduced by Chou (Chou, 2001) , the current cellular automata image approach can also be used to improve protein structural class prediction [see, e.g., (Chou and Zhang, 1993; Chou, 1993; Chou, 1995; Chou, 2000; Chou and Cai, 2004a; Chou and Maggiora, 1998; Chou and Zhang, 1994; Chou, 1989; Luo et al., 2002; Nakashima et al., 1986; Zhou, 1998) ], protein subcellular location prediction [see, e.g., Chou and Cai, 2002; Chou and Cai, 2004b; Chou and Elrod, 1999b; Pan et al., 2003; Zhou and Doctor, 2003) ], and membrane protein type prediction [see, e,g., (Cai et al., 2003; Chou and Elrod, 1999a; Wang et al., 2004a, b) ], as demonstrated elsewhere (Xiao et al., 2004) .\n\nIt is demonstrated thru this study that the novel method developed on the basis of cellular automata is very useful for investigating complicated biological sequences."}