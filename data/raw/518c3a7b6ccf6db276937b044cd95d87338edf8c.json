{"title": "RLadyBug-An R package for stochastic epidemic models", "body": "Understanding the dynamics and spread of infectious diseases is a key component in the design and analysis of defensive strategies. As a consequence, a multitude of epidemiological data on infectious diseases in animal, plant and human communities has been collected to gain insights into the underlying biological and epidemiological processes. The SIR (susceptible-infectious-recovered) model and its variants (S-Exposed-IR, SIS, etc.) are the mathematical tools most commonly used in such analyses. This paper describes a software program for the statistical analysis of a single outbreak in a small population. Special focus is on the spatial spread between subpopulations arranged on a lattice. In veterinary or plant epidemiology such data arise from so-called transmission experiments, where one or more individuals in a controlled environment are inoculated with the infectious disease pathogen. Subsequently, the course of the epidemic is monitored through visual inspection, clinical testing and other methods. The aim ranges in veterinary epidemiology from quantifying disease transmission (Laevens et al., 1999; St\u00e4rk et al., 2000) to determining the effect of a vaccine (Dewulf et al., 2001; Meyns et al., 2004) .\n\nBecause outbreaks induced by transmission experiments are planned and occur in a controlled environment, the produced outbreak data are especially rich. However, the mathematical setup of course also applies to the analysis of ordinary outbreaks. Interesting is also the application to entirely different areas such as the analysis of computer virus in a network (Wierman and Marchette, 2004) , spread of the severe acute respiratory syndrome (SARS) (Donelly and Ghani, 2004) or outbreaks in the wards of a hospital (Grundmann and Hellriegel, 2006) .\n\nRLadyBug is a package implemented in R (R Development Core Team, 2006) providing functionality for the simulation, visualization and estimation in stochastic epidemic models. It enwraps the functionality of the Java program used in H\u00f6hle et al. (2005) by S4 classes and adds a volume of methods for the visualization of outbreak data and their estimation results. The aim of this paper is to describe the features of the package in order to make it accessible to statisticians and statistically trained epidemiologists who are looking for software to analyse their infectious disease data. Less attention is thus given to the statistical particulars, which are explained in H\u00f6hle et al. (2005) .\n\nThis paper is organized as follows: Section 2 gives a short introduction to stochastic epidemic models, Section 3 introduces the package and illustrates its use by providing the corresponding R code for analyzing a transmission experiment with classical swine fever virus (CSFV). Section 4 provides a discussion.\n\nWith focus on the software dimension, only a short introduction to stochastic epidemic models in terms of the SEIR model is given. For a more thorough description see Andersson and Britton (2000) .\n\nA closed population P is hosted in k units. Each individual in P can be in one of the states susceptible, exposed, infectious or recovered. A spatial dimension is introduced by assuming that the k units are arranged in a k = k 1 \u00d7 k 2 lattice. At the beginning of the outbreak, t = 0, the number of susceptibles in each unit is S(0) = (n 1 , . . . , n k ), the number of exposed is E(0) = (m 1 , . . . , m k ) and the number of infectious is I(0) = (0, . . . , 0). At time t, an individual j in unit u j meets infectious at rate\n\nwhere N(u j ) denotes the neighbors of u j (e.g. in the four compass directions). Furthermore, quantifies the within unit transmission rate, whilst n quantifies the transmission rate between neighboring units. If a susceptible meets an infectious it becomes exposed. After being exposed at time E j an individual j has a gamma-distributed incubation time T j E \u223c Ga( E , E ) before becoming infectious, i.e. starting from time I j = E j + T j E , j can infect others. Similarly, the infectious period lasts for T j I \u223c Ga( I , I ) after which recovery occurs, hence R j = I j + T j I labels the time of recovery.\n\nObjective of analyzing outbreak data with SEIR models is the estimation of the parameters =( , n , E , E , I , I ), which permit the effect of control measures to be studied and to generalize the results to different settings. RLadyBug is a tool to accomplish this ambition.\n\nWhere applicable, RLadyBug uses the new S4 class system of R implemented in the methods package. This implies a more explicit class system requiring the programmer to define classes, slots and generics explicitly (Chambers, 1998). Fig. 1 shows the object oriented hierarchy of the package: The classes LBExperiment and LBLayout represent the data layer, LBOptions the algorithmic component and LBInference the results. With the help of the rJava package (Urbanek, 2006) , this S4 framework is connected to the functionality of an underlying Java program performing the computationally intensive operations. (1 , 1)\n\nand R u (t) for the three units in a 1 \u00d7 3 lattice layout.\n\nTo get an understanding of the SEIR model specified in Section 2, simulation based on the Sellke construction (Andersson and Britton, 2000) is utilized to generate data from the model. Code wise, this is accomplished by creating an object of class LBExperiment using the simulate function. Several visualizations of the experiment data can then be generated by plot, e.g. the type = state \u223c time | position argument shows S u (t), E u (t) and I u (t) as a function of time for each unit u in the lattice. The below stated code creates a simulated epidemic in a 1 \u00d7 3 lattice, see Fig. 2 . Initially S(0) = (10, 9, 10) and E(0) = (0, 1, 0). > library(\"RLadyBug\") > layout < -new(\"LBLayout\", S0 = matrix(c(10, 9, 10), 1, 3),\n\nFurther views of LBExperiment objects can be generated using type = state \u223c time or type = state \u223c 1 | position as arguments in plot. The former shows S(t), E(t) and I (t), with e.g. S(t) = k u=1 S u (t), the latter creates an animation illustrating the course of the epidemic by plotting the state given position for a set of fixed time points. As exemplification, the code below uses a 8 \u00d7 16 lattice with 15 individuals in each unit (a realistic setup for a pig farm) and creates a 20-picture animation of the epidemic. Fig. 3 shows the eighth picture of this sequence: Each stacked bar shows the current (t = 58.9 days) percentage of susceptible, exposed, infectious and recovered in the unit. -matrix(15, 8, 16 ) -E0 > exp < -simulate(options, layout = new(\"LBLayout\", S0 = S0, E0 = E0)) > plot(exp, type = state \u223c 1 | position, options = list(noOfPics = 20))\n\nBesides the ability to simulate data, the package contains several data sets from human and veterinary epidemiology. Amongst others are the Smallpox Epidemic in Abakaliki, Nigeria, analyzed e.g. in Andersson and Britton (2000) or O'Neill and Becker (2001) , and the data from CSFV experiments by Laevens et al. (1999) and Dewulf et al. (2001) . t=58.9\n\nExposed Infected Recovered The next section describes a statistical analysis of the experiment by Laevens et al. (1999) using RLadyBug. In this experiment the spread of CSFV was investigated in a 1 \u00d7 3 layout with S(0) = (5, 5, 6) and E = (0, 1, 0) slaughter pigs. Every second day all pigs still alive were investigated using a virus isolation test based on blood plasma.\n\nFor full data, i.e. with known E j , I j , R j event times for all individuals, RLadyBug provides likelihood or Bayesian inference for = ( , n , E , E , I , I ). Details about the underlying equations leading to the log-likelihood and posterior distribution can be found in H\u00f6hle et al. (2005) .\n\nIn practice, however, E j is unobservable. A typical assumption is thus to assume a fixed and known incubation time c and hence compute E j as E j = I j \u2212 c. This was also done in the CSFV experiment by assuming c = 6. With this assumption all event times are known and can be illustrated as in Fig. 4 :\n\nThe individual 12:01 was inoculated at time t = 0. By maximization of the log-likelihood the maximum likelihood estimators are readily determined using RLadyBug. Nonetheless, assuming a fixed and known incubation time is not very realistic. H\u00f6hle et al. (2005) therefore use a Bayesian framework to handle the missing but gamma-distributed exposure times. Unknown (or censored) waiting times T j E \u223c Ga( E , E ) are imputed and updated through a Gibbswithin-Metropolis-Hastings Markov Chain Monte Carlo (MCMC) algorithm.\n\nA Bayesian-analysis of the CSFV data with unknown exposure times could be conducted by the following code:\n\n> data(\"laevens\") > inf.mcmc < -seir(laevens, laevens.opts)\n\nInstead of creating the necessary LBOptionsMCMC object by hand, the call to data also loads an appropriate object laevens.opts for MCMC estimation. For example: shows the requested number of samples to draw from the posterior together with the burn-in and thinning rate; a total of samples*thin+burnin samples are generated. The results are as follows. The results of the MCMC inference are provided as realizations from the Markov chain having the posterior distribution of as stationary distribution. Access to the samples is obtained through the samplePaths method-this makes allowance for further processing using e.g. the coda (convergence diagnostic and output analysis) or boa (Bayesian output analysis) packages from the Comprehensive R Archive Network (Plummer et al., 2006; Smith, 2005) . To exemplify, the sampling paths and the marginal posterior of are inspected in Fig. 5 by > samples < -mcmc(samplePaths(inf.mcmc)) > plot(samples[, \"beta\"])\n\nA matter of particular interest in the CSFV experiment is the relationship between and n -especially whether there is a difference in spread within the pen and between neighboring pens. The following code uses the plot method for LBInferenceMCMC objects to generate Fig. 6 and to display the posterior mean together with lower and upper boundaries of a 95%-highest posterior density (HPD) interval for / n . An important epidemiological quantity of an infectious disease is the basic reproduction ratio R 0 , i.e. the expected number of new infections generated by a single infectious individual in a large susceptible population. In a multitype setup with k groups this can be computed as the largest eigenvalue of the k \u00d7 k matrix containing the mean number of infectious contacts between all units (Andersson and Britton, 2000, Section 6.2) . Samples from the posterior distribution of R 0 are generated by performing this computation for each posterior sample of . The code stated below uses the method R0 to retrieve the samples for R 0 and thus to compute the posterior median together with a symmetric 95% credibility region.\n\n> quantile(R0(inf.mcmc, laevens), c(0.025, 0.5, 0.975)) 2.5% 50% 97.5% 0.3245193 0.6370434 1.2426485\n\nIn this paper we have illustrated the use of RLadyBug for the simulation, visualization and estimation of infectious disease outbreak data. To our knowledge, the package is the first publicly available software for the estimation in stochastic epidemic models. By providing such specialist functionality within a standard software package as R we hope to make a thorough statistical analysis of infectious disease data a bit more routine.\n\nMany extensions towards more complex and realistic models than provided by the package are imaginable. For example, the general multitype SEIR model (Andersson and Britton, 2000, Chapter 6 ) allows for more complicated neighbor dependencies: Letting ( ) be a k \u00d7 k matrix given as a function of the parameter vector , the transmission rates are given by (t) = ( )I( ij ) . Nearest neighborhood transmission as in (1) thus corresponds to ij = I (u i = u j ) + n I (u j \u2208 N(u j )) and hence = ( , n ). An alternative would be to let transmission from neighbors be a function of distance: ij = 1 exp(\u2212 2 dist(u i , u j )). Modifications of the Java code to handle the simulation and maximum likelihood estimation in such models should be feasible. However, obtaining MCMC estimates in case of missing data would require a substantial amount of work. The same comment applies if one wants to extend beyond the currently implemented waiting time distributions (gamma-distributed, exponential-distributed and constant).\n\nThe multitype model could also be applied to the handling of heterogeneous units exemplified by veterinary experiments quantifying the effect of a vaccine. Here, all individuals in specific units are vaccinated, thus having different parameters than individuals in non-vaccinated units. A Monte-Carlo approach could be employed to calculate sample sizes necessary to detect a certain difference in parameters with a given accuracy.\n\nIn addition, we are currently working on an implementation of the logistic-regression approach in Klinkenberg et al. (2002) . This extension illustrates the benefits of providing a flexible and extensible package: the code is purely R-based exploiting the class structure of the package, while using the optimization routines of R for inference.\n\nSources, binaries and documentation of RLadyBug are available for download from the Comprehensive R Archive Network http://cran.r-project.org/ under the GNU Public License. Once installed, the analyses of this article can be reproduced using demo(\"article-csda\")."}