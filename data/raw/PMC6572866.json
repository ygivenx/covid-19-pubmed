{"title": "epicontacts: Handling, visualisation and analysis of epidemiological contacts", "body": "In order to study, prepare for, and intervene against disease outbreaks, infectious disease modellers and public health professionals need an extensive data analysis toolbox. Disease outbreak analytics involve a wide range of tasks that need to be linked together, from data collection and curation to exploratory analyses, and more advanced modelling techniques used for incidence forecasting\n1,\n2 or to predict the impact of specific interventions\n3,\n4. Recent outbreak responses suggest that for such analyses to be as informative as possible, they need to rely on a wealth of available data, including timing of symptoms, characterisation of key delay distributions (e.g. incubation period, serial interval), and data on contacts between patients\n5\u2013\n8.\n\nThe latter type of data is particularly important for outbreak analysis, not only because contacts between patients are useful for unravelling the drivers of an epidemic\n9,\n10, but also because identifying new cases early can reduce ongoing transmission via contact tracing, i.e. follow-up of individuals who reported contacts with known cases\n11,\n12. However, curating contact data and linking them to existing line lists of cases is often challenging, and tools for storing, handling, and visualising contact data are often missing\n13,\n14.\n\nHere, we introduce\nepicontacts, an R\n15 package providing a suite of tools aimed at merging line lists and contact data, and providing basic functionality for handling, visualising and analysing epidemiological contact data. Maintained as part of the R Epidemics Consortium (\nRECON), the package is integrated into an ecosystem of tools for outbreak response using the R language.\n\nThose interested in using\nepicontacts should have a line list of cases as well as a record of contacts between individuals. Both datasets must be enumerated in tabular format with rows and columns. At minimum the line list requires one column with a unique identifier for every case. The contact list needs two columns for the source and destination of each pair of contacts. The datasets can include arbitrary features of case or contact beyond these columns. Once loaded into R and stored as\ndata.frame objects, these datasets can be passed to the\nmake_epicontacts() function (see \u2018Methods\u2019 section for more detail). For an example of data prepared in this format, users can refer to the\noutbreaks R package.\n\n# load the outbreaks package\nlibrary(outbreaks)\n# example simulated ebola data\n\n# line list\nstr(ebola_sim$linelist)\n## \u2018data.frame\u2019:    5888 obs. of 9 variables:\n##  $ case_id                : chr \"d1fafd\" \"53371b\" \"f5c3d8\" \"6c286a\" ...\n##  $ generation             : int 0 1 1 2 2 0 3 3 2 3 ...\n##  $ date_of_infection      : Date, format: NA \"2014-04-09\" ...\n##  $ date_of_onset          : Date, format: \"2014-04-07\" \"2014-04-15\" ...\n##  $ date_of_hospitalisation: Date, format: \"2014-04-17\" \"2014-04-20\" ...\n##  $ date_of_outcome        : Date, format: \"2014-04-19\" NA ...\n##  $ outcome                : Factor w/ 2 levels \"Death\",\"Recover\": NA NA 2 1 2 NA 2 1 2 1 ...\n##  $ gender                 : Factor w/ 2 levels \"f\",\"m\": 1 2 1 1 1 1 1 1 2 2 ...\n##  $ hospital               : Factor w/ 11 levels \"Connaught Hopital\",..: 4 2 7 NA 7 NA 2 9 7 11 ...\n\n# contact list\nstr(ebola_sim$contacts)\n\n## \u2019data.frame\u2019:    3800 obs. of  3 variables:\n##  $ infector: chr  \"d1fafd\" \"cac51e\" \"f5c3d8\" \"0f58c4\" ...\n##  $ case_id : chr  \"53371b\" \"f5c3d8\" \"0f58c4\" \"881bd4\" ...\n##  $ source  : Factor w/ 2 levels \"funeral\",\"other\": 2 1 2 2 2 1 2 2 2 2 ...\n\n# example middle east respiratory syndrome data\n# line list\nstr(mers_korea_2015$linelist)\n\n## \u2019data.frame\u2019:    162 obs. of 15 variables:\n##  $ id            : chr \"SK_1\" \"SK_2\" \"SK_3\" \"SK_4\" ...\n##  $ age           : int 68 63 76 46 50 71 28 46 56 44 ...\n##  $ age_class     : chr \"60-69\" \"60-69\" \"70-79\" \"40-49\" ...\n##  $ sex           : Factor w/ 2 levels \"F\",\"M\": 2 1 2 1 2 2 1 1 2 2 ...\n##  $ place_infect  : Factor w/ 2 levels \"Middle East\",..: 1 2 2 2 2 2 2 2 2 2 ...\n##  $ reporting_ctry: Factor w/ 2 levels \"China\",\"South Korea\": 2 2 2 2 2 2 2 2 2 1 ...\n##  $ loc_hosp      : Factor w/ 13 levels \"365 Yeollin Clinic, Seoul\",..: 10 10 10 10 1 10 10 13 10 10 ...\n##  $ dt_onset      : Date, format: \"2015-05-11\" \"2015-05-18\" ...\n##  $ dt_report     : Date, format: \"2015-05-19\" \"2015-05-20\" ...\n##  $ week_report   : Factor w/ 5 levels \"2015_21\",\"2015_22\",..: 1 1 1 2 2 2 2 2 2 2 ...\n##  $ dt_start_exp  : Date, format: \"2015-04-18\" \"2015-05-15\" ...\n##  $ dt_end_exp    : Date, format: \"2015-05-04\" \"2015-05-20\" ...\n##  $ dt_diag       : Date, format: \"2015-05-20\" \"2015-05-20\" ...\n##  $ outcome       : Factor w/ 2 levels \"Alive\",\"Dead\": 1 1 2 1 1 2 1 1 1 1 ...\n##  $ dt_death      : Date, format: NA NA ...\n\n# contact list\nstr(mers_korea_2015$contacts)\n\n## \u2019data.frame\u2019:    98 obs. of  4 variables:\n##  $ from         : chr  \"SK_14\" \"SK_14\" \"SK_14\" \"SK_14\" ...\n##  $ to           : chr  \"SK_113\" \"SK_116\" \"SK_41\" \"SK_112\" ...\n##  $ exposure     : Factor w/ 5 levels \"Contact with HCW\",..: 2 2 2 2 2 2 2 2 2 2 ...\n##  $ diff_dt_onset: int  10 13 14 14 15 15 15 16 16 16 ...\n\nThe data handling, visualization, and analysis methods described above represent the bulk of\nepicontacts features. More examples of how the package can be used as well as demonstrations of additional features can be found through the\nRECON learn platform and the\nepicontacts vignettes.\n\n\nepicontacts is released as an open-source R package. A stable release is available for Windows, Mac and Linux operating systems via the CRAN repository. The latest development version of the package is available through the RECON Github organization. At minimum users must have R installed. No other system dependencies are required.\n\n# install from CRAN\ninstall.packages(\"epicontacts\")\n# install from Github\ninstall.packages(\"devtools\")\ndevtools::install_github(\"reconhub/epicontacts\")\n\n# load and attach the package\nlibrary(epicontacts)\n\n\nData handling.\nepicontacts includes a novel data structure to accommodate line list and contact list datasets in a single object. This object is constructed with the\nmake_epiconctacts() function and includes attributes from the original datasets. Once combined, these are mapped internally in a graph paradigm as nodes and edges. The\nepicontacts data structure also includes a\nlogical attribute for whether or not this resulting network is directed.\n\nThe package takes advantage of R\u2019s generic functions, which call specific methods depending on the class of an object. This is implemented several places, including the\nsummary.epicontacts() and\nprint.epicontacts() methods, both of which are respectively called when the\nsummary() or\nprint() functions are used on an\nepicontacts object. The package does not include built-in data, as exemplary contact and line list datasets are available in the\noutbreaks package\n16.\n\nThe example that follows will use the\nmers_korea_2015 dataset from\noutbreaks, which which includes initial data collected by the Epidemic Intelligence group at European Centre for Disease Prevention and Control (ECDC) during the 2015 outbreak of Middle East respiratory syndrome (MERS-CoV) in South Korea. Note that the data used here was provided in\noutbreaks for teaching purposes, and therefore does not include the complete line list or contacts from the outbreak.\n\n# install the outbreaks package for data\ninstall.packages(\"outbreaks\")\n\n# load the outbreaks package\nlibrary(outbreaks)\n# construct an epicontacts object\nx <- make_epicontacts(linelist=mers_korea_2015[[1]],\ncontacts = mers_korea_2015[[2]],\ndirected=TRUE)\n# print the object\nx\n\n\n\n## \n## /// Epidemiological Contacts /// \n## \n## // class: epicontacts \n## // 162 cases in linelist; 98 contacts;  directed \n## \n## // linelist \n## \n## \u2019data.frame\u2019:    162 obs. of 15 variables:\n##  $ id            : chr \"SK_1\" \"SK_2\" \"SK_3\" \"SK_4\" ...\n##  $ age           : int 68 63 76 46 50 71 28 46 56 44 ...\n##  $ age_class     : chr \"60-69\" \"60-69\" \"70-79\" \"40-49\" ...\n##  $ sex           : Factor w/ 2 levels \"F\",\"M\": 2 1 2 1 2 2 1 1 2 2 ...\n##  $ place_infect  : Factor w/ 2 levels \"Middle East\",..: 1 2 2 2 2 2 2 2 2 2 ...\n##  $ reporting_ctry: Factor w/ 2 levels \"China\",\"South Korea\": 2 2 2 2 2 2 2 2 2 1 ...\n##  $ loc_hosp      : Factor w/ 13 levels \"365 Yeollin Clinic, Seoul\",..: 10 10 10 10 1 10 10 13 10 10 ...\n##  $ dt_onset      : Date, format: \"2015-05-11\" \"2015-05-18\" ...\n##  $ dt_report     : Date, format: \"2015-05-19\" \"2015-05-20\" ...\n##  $ week_report   : Factor w/ 5 levels \"2015_21\",\"2015_22\",..: 1 1 1 2 2 2 2 2 2 2 ...\n##  $ dt_start_exp  : Date, format: \"2015-04-18\" \"2015-05-15\" ...\n##  $ dt_end_exp    : Date, format: \"2015-05-04\" \"2015-05-20\" ...\n##  $ dt_diag       : Date, format: \"2015-05-20\" \"2015-05-20\" ...\n##  $ outcome       : Factor w/ 2 levels \"Alive\",\"Dead\": 1 1 2 1 1 2 1 1 1 1 ...\n##  $ dt_death      : Date, format: NA NA ...\n##\n## // contacts\n##\n## \u2019data.frame\u2019:    98 obs. of  4 variables:\n##  $ from         : chr  \"SK_14\" \"SK_14\" \"SK_14\" \"SK_14\" ...\n##  $ to           : chr  \"SK_113\" \"SK_116\" \"SK_41\" \"SK_112\" ...\n##  $ exposure     : Factor w/ 5 levels \"Contact with HCW\",..: 2 2 2 2 2 2 2 2 2 2 ...\n##  $ diff_dt_onset: int  10 13 14 14 15 15 15 16 16 16 ...\n\n# view a summary of the object\nsummary(x)\n\n\n##\n## /// Overview //\n##   // number of unique IDs in linelist: 162\n##   // number of unique IDs in contacts: 97\n##   // number of unique IDs in both: 97\n##   // number of contacts: 98\n##   // contacts with both cases in linelist: 100 %\n##\n## /// Degrees of the network //\n##   // in-degree summary:\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n##    0.00    1.00    1.00    1.01    1.00    3.00\n##\n##   // out-degree summary:\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n##    0.00    0.00    0.00    1.01    0.00   38.00\n##\n##   // in and out degree summary:\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n##   1.000   1.000   1.000   2.021   1.000  39.000\n##\n## /// Attributes //\n##   // attributes in linelist:\n##  age age_class sex place_infect reporting_ctry loc_hosp dt_onset dt_report week_report dt_start_exp dt_end_exp dt_diag outcome dt_death\n##\n##   // attributes in contacts:\n##  exposure diff_dt_onset\n\n\nData visualisation.\nepicontacts implements two interactive network visualisation packages:\nvisNetwork and\nthreejs\n17,\n18. These frameworks provide R interfaces to the\nvis.js and\nthree.js JavaScript libraries respectively. Their functionality is incorporated in the generic\nplot() method (\nFigure 1) for an\nepicontacts object, which can be toggled between either with the \u201ctype\u201d parameter. Alternatively, the\nvisNetwork interactivity is accessible via\nvis_epicontacts() (\nFigure 2), and\nthreejs through\ngraph3D() (\nFigure 3). Each function has a series of arguments that can also be passed through\nplot(). Both share a color palette, and users can specify node, edge and background colors. However,\nvis_epicontacts() includes a specification for \u201cnode_shape\u201d by a line list attribute as well as a customization of that shape with an icon from the Font Awesome icon library. The principal distinction between the two is that\ngraph3D() is a three-dimensional visualisation, allowing users to rotate clusters of nodes to better inspect their relationships.\n\nplot(x)\n\nvis_epicontacts(x,\nnode_shape = \"sex\",\nshapes = c(F = \"female\", M = \"male\"),\nedge_label = \"exposure\")\n\ngraph3D(x, bg_col = \"black\")\n\n\nData analysis. Subsetting is a typical preliminary step in data analysis.\nepicontacts leverages a customized\nsubset method to filter line lists or contacts based on values of particular attributes from nodes, edges or both. If users are interested in returning only contacts that appear in the line list (or vice versa), the\nthin() function implements such logic.\n\n# subset for males\nsubset(x, node_attribute = list(\"sex\" = \"M\"))\n# subset for exposure in emergency room\nsubset(x, edge_attribute = list(\"exposure\" = \"Emergency room\"))\n# subset for males who survived and were exposed in emergency room\nsubset(x,\nnode_attribute = list(\"sex\" = \"M\", \"outcome\" = \"Alive\"),\nedge_attribute = list(\"exposure\" = \"Emergency room\"))\nthin(x, \"contacts\")\nthin(x, \"linelist\")\n\nFor analysis of pairwise contact between individuals, the\nget_pairwise() feature searches the line list based on the specified attribute. If the given column is a numeric or date object, the function will return a vector containing the difference of the values of the corresponding \u201cfrom\u201d and \u201cto\u201d contacts. This can be particularly useful, for example, if the line list includes the date of onset of each case. The subtracted value of the contacts would approximate the serial interval for the outbreak\n19. For factors, character vectors and other non-numeric attributes, the default behavior is to print the associated line list attribute for each pair of contacts. The function includes a further parameter to pass an arbitrary function to process the specified attributes. In the case of a character vector, this can be helpful for tabulating information about different contact pairings with\ntable().\n\n# find interval between date onset in cases\nget_pairwise(x, \"dt_onset\")\n# find pairs of age category contacts\nget_pairwise(x, \"age_class\")\n# tabulate the pairs of age category contacts\nget_pairwise(x, \"age_class\", f = table)\n\nWhile there are software packages available for epidemiological contact visualisation and analysis, none aim to accommodate line list and contact data as purposively as\nepicontacts\n20\u2013\n22. Furthermore, this package strives to solve a problem of plotting dense graphs by implementing interactive network visualisation tools. A static plot of a network with many nodes and edges may be difficult to interpret. However, by rotating or hovering over an\nepicontacts visualisation, a user may better understand the data.\n\nThe maintainers of\nepicontacts anticipate new features and functionality. Future development could involve performance optimization for visualising large networks, as generating these interactive plots is resource intensive. Additionally, attention may be directed towards inclusion of alternative visualisation methods.\n\n\nepicontacts provides a unified interface for processing, visualising and analyzing disease outbreak data in the R language. The package and its source are freely available on CRAN and GitHub. By developing functionality with line list and contact list data in mind, the authors aim to enable more efficient epidemiological outbreak analyses.\n\nSoftware available from:\nhttps://CRAN.R-project.org/package=epicontacts\n\n\nSource code available from:\nhttps://github.com/reconhub/epicontacts\n\n\nArchived source code as at time of publication:\nhttps://zenodo.org/record/1210993\n23\n\n\nSoftware license: GPL 2"}